<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Windows on 老艾瑞克的喃喃自語</title>
    <link>https://ericsuperman.github.io/tags/windows/</link>
    <description>Recent content in Windows on 老艾瑞克的喃喃自語</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Except where otherwise noted, content on this site is licensed under a [Creative Commons Attribution 4.0 International license](https://creativecommons.org/licenses/by-sa/4.0/).</copyright>
    <lastBuildDate>Thu, 09 May 2019 14:50:29 +0800</lastBuildDate>
    
	<atom:link href="https://ericsuperman.github.io/tags/windows/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>[CMD Tutorial 4/4] Batch Files</title>
      <link>https://ericsuperman.github.io/posts/command4/</link>
      <pubDate>Thu, 09 May 2019 14:50:29 +0800</pubDate>
      
      <guid>https://ericsuperman.github.io/posts/command4/</guid>
      <description>如果某個任務，需要執行數個命令，都可以用文字檔集結成數行，該文字檔副檔名必須為 .bat ，CMD可以執行 bat 檔案，執行順序就是循序一行執行完成，再換下一行。 我們利用之前介紹的 CON 系統檔案，產生一個簡單的 bat 檔案，接著執行它，看結果是什麼。
C:\Users\Eric&amp;gt;copy con a.bat set msg=hello echo %msg% echo world ^Z 複製了 1 個檔案。 C:\Users\Eric&amp;gt;a C:\Users\Eric&amp;gt;set msg=hello C:\Users\Eric&amp;gt;echo hello hello C:\Users\Eric&amp;gt;echo world world C:\Users\Eric&amp;gt; 上面例子就是簡單的三行，第一行設定變數msg，第二行印出msg的內容，第三行印出普通訊息。可以看到，a.bat 執行到第二行的時候，CMD 已經將變數內容都換好了才執行。
通常在開發程式的時候，需要的工具包括了文字編輯器或是IDE(Integrated Development Environments，整合開發環境)，編譯程式，Make自動化編譯工具&amp;hellip;等，所以即使叫出了 Command Prompt，也許還需要設定一堆環境變數，讓全部的工具程式，都能正確執行。而且每次叫出Command Prompt，執行的內容幾乎沒什麼變化，那當然就是準備好一個設定環境變數的批次檔，叫出Command Prompt的時候執行一次，這樣才比較有效率。</description>
    </item>
    
    <item>
      <title>[CMD Tutorial 3/4] Path Environment Variables</title>
      <link>https://ericsuperman.github.io/posts/command3/</link>
      <pubDate>Thu, 09 May 2019 14:50:23 +0800</pubDate>
      
      <guid>https://ericsuperman.github.io/posts/command3/</guid>
      <description>環境變數 Windows Command Prompt 也有變數的觀念，命令在執行的時候，可以讀取特定變數，然後就像執行命令時帶參數一樣，以不同的模式執行。 例如你可以開發一個aaa程式，執行時需要兩個參數，也可以使用ENV_AAA環境變數，
d:\&amp;gt; aaa c:\aaa d:\bbb 以上例子，兩個參數都是路徑，如果執行很多次會打字打個很累，正好aaa的開發人員寫成也可使用ENV_AAA 環境變數，所以下列方式也可以
d:\&amp;gt; set ENV_AAA=&amp;#34;c:\aaa d:\bbb&amp;#34; 環境變數設定完成後，執行執行 aaa 就可以了，不需要打參數了。 d:\&amp;gt; aaa
蠻多命令，都將不常變動的參數規劃放在環境變數，省下頻繁地打一堆字。 執行一份CMD的時候，作業系統會將全部的環境變數複製一份，這些環境變數專屬於該份CMD ，結束時會自動清掉。也就是說，如果同時執行兩份CMD，Windows 是複製出兩份系統的環境變數給這兩個CMD，兩邊各改了什麼，也不會影響對方，結束時也不會影響Windows系統的環境變數。 如果不小心改壞了什麼環境變數，可以關掉CMD，重新執行一次即可。
SET 想要看總共有哪些環境變數，可用set不帶任何參數
d:\&amp;gt; set set 加上參數，就是設定環境變數了，語法為 set =
d:\&amp;gt; set ENV_AAA=&amp;#34;c:\aaa d:\bbb&amp;#34; ECHO set一執行，舊式列出全部環境變數，如果只是想要看一個變數，可以用 echo 來顯示訊息。 C:\Users\Eric&amp;gt;set ENV_AAA=&amp;ldquo;c:\aaa d:\bbb&amp;rdquo;
C:\Users\Eric&amp;gt;echo %ENV_AAA% &amp;#34;c:\aaa d:\bbb&amp;#34; echo 也能印普通訊息，例如印個經典的 &amp;ldquo;Hello, World!&amp;rdquo;
C:\Users\Eric&amp;gt;echo Hello, World! Hello, World! PATH 當然，有一些名稱，被保留給系統使用，例如 PATH ，就是代表系統搜尋外部命令的路徑順序，每個路徑都必須以分號隔開。這個PATH環境變數因為太常用了，所以Microsoft乾脆開發一個PATH命令，專門負責顯示及修改PATH環境變數。
d:\&amp;gt; path 執行結果如下:
d:\&amp;gt;path PATH=C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Windows\System32\OpenSSH\;C:\Git\cmd;C:\Users\Eric\AppData\Local\Microsoft\WindowsApps; 上面Path變數的內容，其意義為 - 假設使用者想要執行 aaa.</description>
    </item>
    
    <item>
      <title>[CMD Tutorial 2/4] Command Prompt Basic Commands</title>
      <link>https://ericsuperman.github.io/posts/command2/</link>
      <pubDate>Thu, 09 May 2019 14:50:20 +0800</pubDate>
      
      <guid>https://ericsuperman.github.io/posts/command2/</guid>
      <description>切換工作磁碟機與路徑 Windows 沿襲DOS傳統，可將一顆硬碟切割成數個 Paritition，每一個Partition分配一個磁碟機代碼，由A到Z，最多26個磁碟，A磁碟的名稱為A:，B磁碟的名稱為B:，A磁碟與B磁碟是保留給軟碟機，雖然現在已經很難看到軟碟機了。硬碟則是C:開始，開機用的 Windows 目錄也通常位於C:。
假設使用者規劃了一個D磁碟機，專門放資料，其中工作的目錄規劃為d:\prj 目錄，則可用下列方式切換磁碟機與路徑 -
c:\&amp;gt;d: d:\&amp;gt;cd prj d:\prj&amp;gt; 以前DOS沒下列語法，但在Windows 10 Command Prompt，可以合併為下列方式 - c:\&amp;gt;cd d:\prj d:\prj&amp;gt;
顯示檔案清單 d:\prj&amp;gt; dir 變更檔案名稱 d:\prj&amp;gt; ren a1.txt a2.txt 上面例子中，a1.txt 是變更前的檔名，必須已經存在於目前目錄，不然會有錯誤訊息。 a2.txt 是變更後的檔名，必須不存在。如果已經存在，會有錯誤訊息。 命令執行完成後，a1.txt就不存在了，會有一個a2.txt檔案，內容跟原始的a1.txt 一樣。
複製檔案 d:\prj&amp;gt; copy a1.txt a2.txt 上面例子中，a1.txt 是來源檔，必須已經存在於目前目錄，不然會有錯誤訊息。 a2.txt 是目的地檔，如果已經存在，會被蓋掉，a1.txt 不會有任何變更。 命令執行完成後，a1.txt與a2.txt 同時存在，兩個檔案內容也是一樣。 簡易建立檔案
Windows 保留一些特殊檔名，例如 con 代表 Console。有時候想要產生一個新檔案，打幾個字，叫出文字編輯器，打幾個字，存檔，實在太慢，不如用在 Command Prompt 利用 con 檔案就能輕鬆解決 -
d:\prj&amp;gt; copy con test.txt abc ^z 複製了 1 個檔案。 d:\prj&amp;gt; 上面例子中，先打了abc三個字母代表內容，之後 ^Z 這個字是按了 Ctrl-Z，這是Windows 規定好的 EOF(End of File)字元，Windows看到這個字，等同於檔案結尾，因此確定了整個檔案，接著開始複製整個檔案，一個新的test.</description>
    </item>
    
    <item>
      <title>[CMD Tutorial 1/4] What is Windows Command Prompt?</title>
      <link>https://ericsuperman.github.io/posts/command1/</link>
      <pubDate>Thu, 09 May 2019 14:50:16 +0800</pubDate>
      
      <guid>https://ericsuperman.github.io/posts/command1/</guid>
      <description>Windows Command Prompt 在Windows被發明之前，當時主流的電腦作業系統是 MS-DOS (Microsoft Disk Operating System)，以文字下命令的方式跟電腦溝通。雖然沒有圖形化介面友善，但其實主流的電腦作業系統熟悉MS-DOS命令的人，能夠飛快地打字，迅速地做很多事情。例如刪除一個檔案，Windows 需要叫出檔案管理員，用滑鼠找到該檔案，按右鍵，選刪除，如果在 DOS 環境，敲鍵盤 &amp;ldquo;del &amp;ldquo;，同時利用鍵自動補齊檔名的功能，很快地就能刪除檔案。所以Windows發展了這麼多代，都還是保留一個類似的介面。
到現在，大部分使用者偏好這種幾乎不用學習的圖形化介面，日常生活操作也幾乎都能用圖形化介面完成，文字介面就很少人用了。大概只剩下少數場合，例如學習程式設計，撰寫程式碼仍然利用圖形化介面的文字編輯器，可是編譯程式碼、執行，使用 Command Prompt 會比較方便。
那在Windows 10環境，如何執行 Command Prompt呢? 在左下角搜尋功能裡面打 &amp;ldquo;CMD&amp;rdquo; ，系統會找出&amp;rdquo;命令提示字元&amp;rdquo; ，執行該命令，就進入了command line模式了。如果近期內會常用 CMD，可以釘選到工具列，比較方便。
進入 Command Prompt 後，通常會先打個 DIR ，看看有哪些檔案，位於什麼路徑。
c:\&amp;gt; dir DIR 其實有很多參數可做變化，例如列出隱藏檔、用別的欄位排序顯示等，詳細用法可以用 Help DIR 來看。其他命令也可以用 &amp;ldquo;HELP &amp;ldquo;來看該命令的詳細說明。
c:\&amp;gt; help dir 顯示檔案清單以列出目錄中的檔案及子目錄。 DIR [drive:][path][filename] [/A[[:]attributes]] [/B] [/C] [/D] [/L] [/N] [/O[[:]sortorder]] [/P] [/Q] [/R] [/S] [/T[[:]timefield]] [/W] [/X] [/4] [drive:][path][filename] 指定要顯示的磁碟機、目錄或檔案。 /A 顯示具有指定之屬性的檔案。 attributes D 目錄 R 唯讀檔案 H 隱藏檔案 A 待封存檔案 S 系統檔案 I 非內容索引檔案 L 重新分析點 O 離線檔案 - 首碼表示否定 /B 使用單純格式 (沒有標頭資訊或摘要)。 /C 在檔案大小中顯示千位分隔符號。這是預設值。使用 /-C 可停用 分隔符號的顯示。 /D 與寬的列表格式相同，但是依照欄來排序。 /L 使用小寫顯示。 /N 使用新的長列表格式，檔名會顯示在最右方。 /O 依照指定的排序順序來列出檔案。 sortorder N 依名稱 (英文字母) S 依大小 (最小的在前) E 依副檔名 (英文字母) D 依日期/時間 (日期較早的在前) G 先列出子目錄 - 首碼表示相反的順序 /P 當資料填滿整個螢幕時暫停顯示。 /Q 顯示檔案擁有者。 /R 顯示檔案的替代資料流。 /S 顯示指定目錄及所有子目錄中的檔案。 /T 控制用來顯示或排序的時間欄位 timefield C 建立 A 上次檔案存取時間 W 上次寫入檔案時間 /W 使用寬的列表格式。 /X 顯示對非 8.</description>
    </item>
    
  </channel>
</rss>